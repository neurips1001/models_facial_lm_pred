options:
  opts_celeba:
    dataset_module:
      args:
      - --dataset_module
      kwargs:
        default: celeba_dataset
        help: Select dataset module by name of file containing the dataset class without
          .py extension. File must exist in data directory.
        type: 'str'
    imgs_dir:
      args:
      - --imgs_dir
      kwargs:
        default: ./
        help: Specify the path to the images of the dataset.
        type: 'str'
    lm_ordering_lm_order:
      args:
      - --lm_ordering_lm_order
      kwargs:
        default:
        - nose_x
        - nose_y
        help: Specify the order of landmark coordinates for generating the target
          y.
        nargs: +
        type: 'str'
    lms_file:
      args:
      - --lms_file
      kwargs:
        default: ./
        help: Specify the path to the txt file containing the landmarks.
        type: 'str'
    normalize_mean:
      args:
      - --normalize_mean
      kwargs:
        default:
        - 0.485
        - 0.456
        - 0.406
        help: Specify the mean value for each channel. Normalization is computed according
          to input[channel] = (input[channel] - mean[channel]) / std[channel]. Default
          values are for using pretrained torch models.
        nargs: +
        type: 'float'
    normalize_std:
      args:
      - --normalize_std
      kwargs:
        default:
        - 0.229
        - 0.224
        - 0.225
        help: Specify the standard deviations for each channel. Normalization is computed
          according to input[channel] = (input[channel] - mean[channel]) / std[channel].
          Default values are for using pretrained torch models.
        nargs: +
        type: 'float'
    opts2dataset:
      args:
      - --opts2dataset
      kwargs:
        default: opts2celeba_dataset
        help: Specify dataset wrapper function which should be used to instantiate
          the dataset class (subclass of torch.utils.data.Dataset). Dataset wrapper
          function must exist in specified dataset module.
        type: 'str'
    opts2y_generator:
      args:
      - --opts2y_generator
      kwargs:
        default: opts2lm_ordering
        help: Specify the wrapper function for the functor which generates y by selecting
          landmark coordinates.
        type: 'str'
    preprocess:
      args:
      - --preprocess
      kwargs:
        default: []
        help: Specify the list of preprocessing steps.
        nargs: '*'
        type: 'str'
    preprocess_lm_keys:
      args:
      - --preprocess_lm_keys
      kwargs:
        default: []
        help: Specify a list of landmark keys that should be in the output sample.
          When no landmarks are specified all landmarks are considered.
        nargs: '*'
        type: 'str'
    randcovercrop_lms_covered:
      args:
      - --randcovercrop_lms_covered
      kwargs:
        default:
        - nose
        help: Specify a list of landmark keys that should be covered by random cover
          crop.
        nargs: +
        type: 'str'
    randcovercrop_no_rand:
      args:
      - --randcovercrop_no_rand
      kwargs:
        action: store_true
        help: Flag for no random sampling of crop position.
    randcovercrop_output_size:
      args:
      - --randcovercrop_output_size
      kwargs:
        default:
        - 100
        help: Specify image size after random cover crop.
        nargs: +
        type: 'int'
    randcovercrop_padding:
      args:
      - --randcovercrop_padding
      kwargs:
        default:
        - 0.0
        help: Specify the padding as fraction w.r.t. image edge. If one number is
          specified same padding ratio is used for x and y dimension. With two numbers
          padding rates for both dimensions can be specified separately. Numbers must
          be between 0 and 1.
        nargs: +
        type: 'float'
    randhorflip_p:
      args:
      - --randhorflip_p
      kwargs:
        default: 0.0
        help: Specify the probability for horizontal flip.
        type: 'float'
    rescale_output_size:
      args:
      - --rescale_output_size
      kwargs:
        default:
        - 100
        help: Specify image size after rescaling.
        nargs: +
        type: 'int'
    rotate_y:
      args:
      - --rotate_y
      kwargs:
        default:
        - 0.0
        help: Specify a list with 4 entries [r_11, r_12, r_21, r_22] which represents
          a 2x2 matrix. When it is specified the roation matrix is applied on y after
          y_generator.
        nargs: +
        type: 'float'
  opts_resnet:
    block:
      args:
      - --block
      kwargs:
        default: bottleneck
        help: Specifiy the block type. Either bottleneck or basicblock.
        type: 'str'
    block_structure:
      args:
      - --block_structure
      kwargs:
        default:
        - 3
        - 4
        - 6
        - 3
        help: Specify 4 integers to select the number of layers for each of the 4
          blocks of resnet.
        nargs: 4
        type: 'int'
    model_module:
      args:
      - --model_module
      kwargs:
        default: constraintnet
        help: Select module with neural network model. (e.g. constraintnet or resnet).
        type: 'str'
    opts2model:
      args:
      - --opts2model
      kwargs:
        default: opts2constraintnet
        help: Specified function instantiates model (e.g. opts2constraintnet).
        type: 'str'
    z_dim:
      args:
      - --z_dim
      kwargs:
        default: 4
        help: Specify the number of dimensions for the intermediate representation
          z.
        type: 'int'
    zero_init_residual:
      args:
      - --zero_init_residual
      kwargs:
        action: store_true
        help: Flag to set batch normalization in identity bypass to zero.
  opts_dataloader:
    batch_size:
      args:
      - --batch_size
      kwargs:
        default: 64
        help: Specify the number of samples within a batch.
        type: 'int'
    experiment_ID:
      args:
      - --experiment_ID
      kwargs:
        default: 'a'
        help: Specify the ID of the experiment.
        type: 'str'
    sampler:
      args:
      - --sampler
      kwargs:
        default: train
        help: Specify either train, valid or test for data subset of interest.
        type: 'str'
    sampler_rand:
      args:
      - --sampler_rand
      kwargs:
        action: store_true
        default: true
        help: Random or determininstic sampling process.
    threads:
      args:
      - --threads
      kwargs:
        default: 8
        help: Specify the number of threads used for data loading.
        type: 'int'
  opts_general_test:
    comment:
      args:
      - --comment
      kwargs:
        default: No comment!
        help: Type some comment for easier reuse :).
        type: 'str'
    config_final:
      args:
      - --config_final
      kwargs:
        default: ./config_final.yaml
        help: Save options setted by command line arguments and/or config file in
          a yaml file.
        type: 'str'
    multiple_gpus:
      args:
      - --multiple_gpus
      kwargs:
        action: store_true
        default: false
        help: Flag for using multiple GPUs.
    opt_def_final:
      args:
      - --opt_def_final
      kwargs:
        default: ./opt_def_final.yaml
        help: Save option defintion by command line arguments and/or config file in
          a yaml file.
        type: 'str'
    reload_ckpt_file:
      args:
      - --reload_ckpt_file
      kwargs:
        default: ./checkpoints/latest
        help: Specify the checkpoint file which should be reloaded.
        type: 'str'
    results_file:
        args:
        - --results_file
        kwargs:
          default: ./results.yaml
          help: Specify the path for saving results on test set.
          type: 'str'
    version:
      args:
      - --version
      kwargs:
        default: v1.0
        help: Specify the version of the source code for reproducability.
        type: 'str'
  opts_mseloss:
    opts2loss_fct:
      args:
      - --opts2_loss_fct
      kwargs:
        default: opts2mseloss
        help: Name of function to instantiate loss function. Specified function must
          defined in module optimization.optimizer.
        type: 'str'
